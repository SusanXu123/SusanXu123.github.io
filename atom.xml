<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>juan.xu blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-27T12:25:46.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>juan.xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决阿里云服务slb解析域名错误问题</title>
    <link href="http://yoursite.com/2017/11/27/%E8%A7%A3%E5%86%B3%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1slb%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/27/解决阿里云服务slb解析域名错误问题/</id>
    <published>2017-11-27T12:07:02.000Z</published>
    <updated>2017-11-27T12:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：在阿里云上用docker swarm部署了两个服务 serviceA 和 serviceB 后，出现访问 serviceA 服务时路由到 serviceB 的情况，及访问serviceA/ping 返回的是’ping from serviceB’, 其中serviceA是使用 nginx 代理了一层的服务， serviceB是直接用node 起的服务。<br>serviceA yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  test-net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  app1:</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line"><span class="attr">      mode:</span> <span class="string">replicated</span></div><div class="line"><span class="attr">      replicas:</span> <span class="number">1</span></div><div class="line"><span class="attr">      restart_policy:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">any</span></div><div class="line"><span class="attr">      update_config:</span></div><div class="line"><span class="attr">        failure_action:</span> <span class="string">rollback</span></div><div class="line"><span class="attr">    image:</span> <span class="string">registry-internal.cn-shanghai.aliyuncs.com/test/serviceA:latest</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">test-net</span></div><div class="line"><span class="attr">  nginx:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">registry-internal.cn-shanghai.aliyuncs.com/test/nginx-ervice:latest</span></div><div class="line"><span class="attr">    labels:</span></div><div class="line">      <span class="string">aliyun.routing.port_80:</span> <span class="string">serviceA.com</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="attr">      paprika-net:</span></div><div class="line"><span class="attr">        aliases:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">serviceA.com</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="number">80</span><span class="string">/tcp</span></div><div class="line"><span class="attr">version:</span> <span class="string">"3.2"</span></div></pre></td></tr></table></figure></p>
<p>serviceB yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  test-net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  nginx:</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line"><span class="attr">      mode:</span> <span class="string">replicated</span></div><div class="line"><span class="attr">      replicas:</span> <span class="number">1</span></div><div class="line"><span class="attr">      restart_policy:</span></div><div class="line"><span class="attr">        condition:</span> <span class="string">any</span></div><div class="line"><span class="attr">      update_config:</span></div><div class="line"><span class="attr">        failure_action:</span> <span class="string">rollback</span></div><div class="line"><span class="attr">    image:</span> <span class="string">registry-internal.cn-shanghai.aliyuncs.com/test/serviceB:latest</span></div><div class="line"><span class="attr">    labels:</span></div><div class="line">      <span class="string">aliyun.routing.port_80:</span> <span class="string">serviceB.com</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="attr">      test-net:</span></div><div class="line"><span class="attr">        aliases:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">serviceB.com</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="number">80</span><span class="string">/tcp</span></div><div class="line"><span class="attr">version:</span> <span class="string">"3.2"</span></div></pre></td></tr></table></figure></p>
<p>解决过程：<br>1.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题描述：在阿里云上用docker swarm部署了两个服务 serviceA 和 serviceB 后，出现访问 serviceA 服务时路由到 serviceB 的情况，及访问serviceA/ping 返回的是’ping from serviceB’, 其中servi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/04/16/hello-world/"/>
    <id>http://yoursite.com/2017/04/16/hello-world/</id>
    <published>2017-04-16T05:04:40.000Z</published>
    <updated>2017-04-16T05:24:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<p>dasd</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>起一个服务进行两个不同的微信公众号之间的素材迁移</title>
    <link href="http://yoursite.com/2017/04/16/sync-wechat/"/>
    <id>http://yoursite.com/2017/04/16/sync-wechat/</id>
    <published>2017-04-16T05:04:40.000Z</published>
    <updated>2017-04-26T07:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-所需依赖"><a href="#1-所需依赖" class="headerlink" title="1. 所需依赖"></a>1. 所需依赖</h3><ul>
<li><p>redis  </p>
<p>文档：<a href="http://redis.js.org/#api-connection-and-other-events-ready" target="_blank" rel="external">http://redis.js.org/#api-connection-and-other-events-ready</a></p>
<p>官网：<a href="https://redis.io/" target="_blank" rel="external">https://redis.io/</a> </p>
<p>是一个由Salvatore Sanfilippo写的key-value存储系统。在项目中用于缓存access-token</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install redis</div></pre></td></tr></table></figure>
</li>
<li><p>bluebird</p>
<p>方法 promise 化</p>
<p><a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="external">https://github.com/petkaantonov/bluebird</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install bluebird</div></pre></td></tr></table></figure>
</li>
<li><p>wechatApi</p>
<p>Wechat API/主动调用API，与微信后台官网的素材管理方法对应</p>
<p><a href="https://github.com/node-webot/wechat-api" target="_blank" rel="external">https://github.com/node-webot/wechat-api</a></p>
<p><a href="http://doxmate.cool/node-webot/wechat-api/api.html#api_material_exports_getMaterial" target="_blank" rel="external">http://doxmate.cool/node-webot/wechat-api/api.html#api_material_exports_getMaterial</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install wechat-api</div></pre></td></tr></table></figure>
</li>
<li><p>disposition</p>
<p>获取相应头部信息</p>
<p><a href="https://github.com/jshttp/content-disposition" target="_blank" rel="external">https://github.com/jshttp/content-disposition</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install content-disposition</div></pre></td></tr></table></figure>
</li>
<li><p>express</p>
<p>基于 <a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>  的Web开发框架，在该项目中用于起服务器</p>
<p><a href="https://github.com/expressjs/express" target="_blank" rel="external">https://github.com/expressjs/express</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i express</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h3 id="2-编程逻辑设计"><a href="#2-编程逻辑设计" class="headerlink" title="2.编程逻辑设计"></a>2.编程逻辑设计</h3><ol>
<li>用redis缓存access-token</li>
<li>用WeChat-api初始化两个实例：sourceWechat, tragetWechat </li>
<li>用Wechat-api下载sourceWechat的素材 &gt;</li>
<li>将下载的素材保存到本地cache 文件夹中</li>
<li>将保存的文件用Wechat-api 上传到 tragetWechat，并把本地文件删除</li>
</ol>
<h3 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3.具体实现"></a>3.具体实现</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-所需依赖&quot;&gt;&lt;a href=&quot;#1-所需依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 所需依赖&quot;&gt;&lt;/a&gt;1. 所需依赖&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;redis  &lt;/p&gt;
&lt;p&gt;文档：&lt;a href=&quot;http://redis.js.
    
    </summary>
    
    
  </entry>
  
</feed>
