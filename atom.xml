<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>juan.xu blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-27T13:20:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>juan.xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决阿里云服务slb解析域名错误问题</title>
    <link href="http://yoursite.com/2017/11/27/solve-question-of-aliyun/"/>
    <id>http://yoursite.com/2017/11/27/solve-question-of-aliyun/</id>
    <published>2017-11-27T12:07:02.000Z</published>
    <updated>2017-11-27T13:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：在阿里云上用docker swarm部署了两个服务 serviceA 和 serviceB 后，出现访问 serviceA 服务时路由到 serviceB 的情况，即访问serviceA/ping 返回的是’ping from serviceB’, 其中serviceA是使用 nginx 代理了一层的服务， serviceB是直接用node 起的服务。</p>
<p>serviceA nginx 代理配置<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">upstream backend &#123;</div><div class="line">        server app1:3000;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>serviceA docker-swarm<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  test-net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  app1:</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line">      <span class="string">...</span></div><div class="line"><span class="attr">    image:</span> <span class="string">registry-internal.cn-shanghai.aliyuncs.com/test/serviceA:latest</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">test-net</span></div><div class="line"><span class="attr">  nginx:</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line">      <span class="string">...</span></div><div class="line"><span class="attr">    image:</span> <span class="string">registry-internal.cn-shanghai.aliyuncs.com/test/nginx-ervice:latest</span></div><div class="line"><span class="attr">    labels:</span></div><div class="line">      <span class="string">aliyun.routing.port_80:</span> <span class="string">serviceA.com</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="attr">      test-net:</span></div><div class="line"><span class="attr">        aliases:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">serviceA.com</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="number">80</span><span class="string">/tcp</span></div><div class="line"><span class="attr">version:</span> <span class="string">"3.2"</span></div></pre></td></tr></table></figure></p>
<p>serviceB docker-swarm<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  test-net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  app1:</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line">      <span class="string">...</span></div><div class="line"><span class="attr">    image:</span> <span class="string">registry-internal.cn-shanghai.aliyuncs.com/test/serviceB:latest</span></div><div class="line"><span class="attr">    labels:</span></div><div class="line">      <span class="string">aliyun.routing.port_80:</span> <span class="string">serviceB.com</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="attr">      test-net:</span></div><div class="line"><span class="attr">        aliases:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">serviceB.com</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="number">80</span><span class="string">/tcp</span></div><div class="line"><span class="attr">version:</span> <span class="string">"3.2"</span></div></pre></td></tr></table></figure></p>
<p>解决过程：</p>
<h5 id="1-判断是否是域名路由问题"><a href="#1-判断是否是域名路由问题" class="headerlink" title="1. 判断是否是域名路由问题"></a>1. 判断是否是域名路由问题</h5><p>首先， serviceB服务 和 serviceA 的两个服务都在同一个网络环境下，必须要判定是否是域名路由错误<br>通过ssh登录进serviceA 的 nginx 服务所在的机器，终端进入 nginx 容器内, 跟踪nginx 服务的日志<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh root@***ip**</div><div class="line">docker ps</div><div class="line">docker <span class="_">-f</span> logs [container]</div></pre></td></tr></table></figure></p>
<p>然后连续访问 <a href="http://serviceA.com/ping" target="_blank" rel="external">http://serviceA.com/ping</a> 发现每次访问都有日志，说明域名解析没有问题，怀疑是nginx代理有问题</p>
<h5 id="2-在确定两个服务的域名解析没有问题后，先确定serviceA-的-nginx-服务是否有问题"><a href="#2-在确定两个服务的域名解析没有问题后，先确定serviceA-的-nginx-服务是否有问题" class="headerlink" title="2. 在确定两个服务的域名解析没有问题后，先确定serviceA 的 nginx 服务是否有问题"></a>2. 在确定两个服务的域名解析没有问题后，先确定serviceA 的 nginx 服务是否有问题</h5><p>从阿里云的控制台进入serviceA应用的管理页，进入serviceA应用下 的nginx 容器终端, curl 其代理的 app1服务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl app1</div></pre></td></tr></table></figure></p>
<p>多次执行后发现，平均有一半是路由到serviceA 的 app 服务，一半是路由到serviceB服务，nginx服务访问没有问题，进一步怀疑是nginx代理到了可能serviceB</p>
<h5 id="3-确认是否是代理问题"><a href="#3-确认是否是代理问题" class="headerlink" title="3. 确认是否是代理问题"></a>3. 确认是否是代理问题</h5><p>因为serviceB服务和serviceA的2个服务都在test-net 网络下，而serviceB部署的时候服务名称和serviceA的app1服务名称相同，怀疑是nginx 无法区分serviceA的app1服务和serviceB服务，所以两个都代理了，<br>分别进入serviceA 的 app1 服务所在的机器，和 serviceB服务所在的机器， 并同时跟踪两个服务的日志后发现的确有一半的访问进入了serviceB，</p>
<h4 id="4-修改service-name"><a href="#4-修改service-name" class="headerlink" title="4. 修改service name"></a>4. 修改service name</h4><p>在阿里云容器服务的应用中修改serviceB docker-swarm 的 service name,<br>serviceA docker-swarm<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  test-net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  serviceB:</span></div><div class="line">  <span class="string">.....</span></div></pre></td></tr></table></figure></p>
<p>serviceB重新部署完成后再次连续访问 <a href="http://serviceA.com/ping，" target="_blank" rel="external">http://serviceA.com/ping，</a> 发现仍然有一半路由到 serviceB中</p>
<h4 id="4-重启serviceA-的-nginx-服务的-nginx"><a href="#4-重启serviceA-的-nginx-服务的-nginx" class="headerlink" title="4. 重启serviceA 的 nginx 服务的 nginx"></a>4. 重启serviceA 的 nginx 服务的 nginx</h4><p>通过ssh登录进serviceA 的 nginx 服务所在的机器，终端进入 nginx 容器内, 重启nginx<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx restart</div></pre></td></tr></table></figure></p>
<p>连续多次访问 <a href="http://serviceA.com/ping，发现问题解决" target="_blank" rel="external">http://serviceA.com/ping，发现问题解决</a></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>因为serviceB服务和serviceA的2个服务都在 test-net 网络下，serviceA的nginx 服务是代理到它的app1服务，而serviceB服务也叫app1服务，nginx 无法区分serviceA的app1服务和serviceB服务，所以首次代理的时候会记住两个服务的Id并对他们均进行反向代理，之后虽然我们修改了serviceB服务的 service name, 但是因为 服务是代理到它的app1服务，而serviceB服务也叫app1服务，nginx 服务记住的是 container id, 所以不会重新代理，在重启nginx 后，nginx 会重新去找app1服务，所以就不会再代理错误</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题描述：在阿里云上用docker swarm部署了两个服务 serviceA 和 serviceB 后，出现访问 serviceA 服务时路由到 serviceB 的情况，即访问serviceA/ping 返回的是’ping from serviceB’, 其中servi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/04/16/hello-world/"/>
    <id>http://yoursite.com/2017/04/16/hello-world/</id>
    <published>2017-04-16T05:04:40.000Z</published>
    <updated>2017-04-16T05:24:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<p>dasd</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>起一个服务进行两个不同的微信公众号之间的素材迁移</title>
    <link href="http://yoursite.com/2017/04/16/sync-wechat/"/>
    <id>http://yoursite.com/2017/04/16/sync-wechat/</id>
    <published>2017-04-16T05:04:40.000Z</published>
    <updated>2017-04-26T07:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-所需依赖"><a href="#1-所需依赖" class="headerlink" title="1. 所需依赖"></a>1. 所需依赖</h3><ul>
<li><p>redis  </p>
<p>文档：<a href="http://redis.js.org/#api-connection-and-other-events-ready" target="_blank" rel="external">http://redis.js.org/#api-connection-and-other-events-ready</a></p>
<p>官网：<a href="https://redis.io/" target="_blank" rel="external">https://redis.io/</a> </p>
<p>是一个由Salvatore Sanfilippo写的key-value存储系统。在项目中用于缓存access-token</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install redis</div></pre></td></tr></table></figure>
</li>
<li><p>bluebird</p>
<p>方法 promise 化</p>
<p><a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="external">https://github.com/petkaantonov/bluebird</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install bluebird</div></pre></td></tr></table></figure>
</li>
<li><p>wechatApi</p>
<p>Wechat API/主动调用API，与微信后台官网的素材管理方法对应</p>
<p><a href="https://github.com/node-webot/wechat-api" target="_blank" rel="external">https://github.com/node-webot/wechat-api</a></p>
<p><a href="http://doxmate.cool/node-webot/wechat-api/api.html#api_material_exports_getMaterial" target="_blank" rel="external">http://doxmate.cool/node-webot/wechat-api/api.html#api_material_exports_getMaterial</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install wechat-api</div></pre></td></tr></table></figure>
</li>
<li><p>disposition</p>
<p>获取相应头部信息</p>
<p><a href="https://github.com/jshttp/content-disposition" target="_blank" rel="external">https://github.com/jshttp/content-disposition</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install content-disposition</div></pre></td></tr></table></figure>
</li>
<li><p>express</p>
<p>基于 <a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>  的Web开发框架，在该项目中用于起服务器</p>
<p><a href="https://github.com/expressjs/express" target="_blank" rel="external">https://github.com/expressjs/express</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i express</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h3 id="2-编程逻辑设计"><a href="#2-编程逻辑设计" class="headerlink" title="2.编程逻辑设计"></a>2.编程逻辑设计</h3><ol>
<li>用redis缓存access-token</li>
<li>用WeChat-api初始化两个实例：sourceWechat, tragetWechat </li>
<li>用Wechat-api下载sourceWechat的素材 &gt;</li>
<li>将下载的素材保存到本地cache 文件夹中</li>
<li>将保存的文件用Wechat-api 上传到 tragetWechat，并把本地文件删除</li>
</ol>
<h3 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3.具体实现"></a>3.具体实现</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-所需依赖&quot;&gt;&lt;a href=&quot;#1-所需依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 所需依赖&quot;&gt;&lt;/a&gt;1. 所需依赖&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;redis  &lt;/p&gt;
&lt;p&gt;文档：&lt;a href=&quot;http://redis.js.
    
    </summary>
    
    
  </entry>
  
</feed>
