<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>juan.xu blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-20T06:00:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>juan.xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 Ui Recoder 录制一份前端自动化测试用例</title>
    <link href="http://yoursite.com/2017/12/20/Uirecoder-learn/"/>
    <id>http://yoursite.com/2017/12/20/Uirecoder-learn/</id>
    <published>2017-12-20T05:49:21.000Z</published>
    <updated>2017-12-20T06:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>中文文档：<a href="https://github.com/alibaba/uirecorder/blob/master/README_zh-cn.md" target="_blank" rel="noopener">https://github.com/alibaba/uirecorder/blob/master/README_zh-cn.md</a><br>中文使用手册：<a href="https://github.com/alibaba/uirecorder/blob/master/doc/zh-cn/pc-standard.md" target="_blank" rel="noopener">https://github.com/alibaba/uirecorder/blob/master/doc/zh-cn/pc-standard.md</a></p>
<h3 id="1-安装相关依赖"><a href="#1-安装相关依赖" class="headerlink" title="1. 安装相关依赖"></a>1. 安装相关依赖</h3><h5 id="1-安装-NodeJs-版本号-gt-v7-x"><a href="#1-安装-NodeJs-版本号-gt-v7-x" class="headerlink" title="1. 安装 NodeJs (版本号 &gt;= v7.x)"></a>1. 安装 NodeJs (版本号 &gt;= v7.x)</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Brew install node</div></pre></td></tr></table></figure>
<h5 id="2-安装-chrome"><a href="#2-安装-chrome" class="headerlink" title="2. 安装 chrome"></a>2. 安装 chrome</h5><p><a href="https://www.google.com/chrome/" target="_blank" rel="noopener">https://www.google.com/chrome/</a></p>
<h5 id="3-使用-img-diff的话需要安装graphicsmagick"><a href="#3-使用-img-diff的话需要安装graphicsmagick" class="headerlink" title="3. 使用 img diff的话需要安装graphicsmagick"></a>3. 使用 img diff的话需要安装graphicsmagick</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install graphicsmagick</div></pre></td></tr></table></figure>
<h5 id="4-安装-UI-Recorder-和-mocha-最好用cnpm-因为npm安装chromedriver会超时"><a href="#4-安装-UI-Recorder-和-mocha-最好用cnpm-因为npm安装chromedriver会超时" class="headerlink" title="4. 安装 UI Recorder 和 mocha(最好用cnpm,因为npm安装chromedriver会超时)"></a>4. 安装 UI Recorder 和 mocha(最好用cnpm,因为npm安装chromedriver会超时)</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install uirecorder mocha -g</div></pre></td></tr></table></figure>
<h3 id="2-Pc录制"><a href="#2-Pc录制" class="headerlink" title="2. Pc录制"></a>2. Pc录制</h3><h5 id="1-初始化测试工程"><a href="#1-初始化测试工程" class="headerlink" title="1. 初始化测试工程"></a>1. 初始化测试工程</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Mkdir <span class="built_in">test</span> //创建文件夹</div><div class="line">uirecorder init</div></pre></td></tr></table></figure>
<p>初始化过程中会有一些配置问题，一路回车即可</p>
<h5 id="2-开始录制测试用例"><a href="#2-开始录制测试用例" class="headerlink" title="2. 开始录制测试用例"></a>2. 开始录制测试用例</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uirecorder start</div></pre></td></tr></table></figure>
<h5 id="3-生成测试代码"><a href="#3-生成测试代码" class="headerlink" title="3. 生成测试代码"></a>3. 生成测试代码</h5><p>录制完成后会在当面目录下的sample/下生成test.spec.js文件</p>
<h5 id="4-启动WebDriver服务器"><a href="#4-启动WebDriver服务器" class="headerlink" title="4. 启动WebDriver服务器"></a>4. 启动WebDriver服务器</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Npm run server</div></pre></td></tr></table></figure>
<h5 id="5-运行测试用例"><a href="#5-运行测试用例" class="headerlink" title="5. 运行测试用例"></a>5. 运行测试用例</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Npm run singletest</div></pre></td></tr></table></figure>
<h5 id="6-获得测试报告和单步截图"><a href="#6-获得测试报告和单步截图" class="headerlink" title="6. 获得测试报告和单步截图"></a>6. 获得测试报告和单步截图</h5><p>./reports/index.html<br>./reports/index.xml (JUnit)<br>./reports/index.json<br>./screenshots/</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中文文档：&lt;a href=&quot;https://github.com/alibaba/uirecorder/blob/master/README_zh-cn.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/alibab
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用 electron-vue 脚手架 和 builder 构建一个mac环境下的demo</title>
    <link href="http://yoursite.com/2017/12/18/electron-vue/"/>
    <id>http://yoursite.com/2017/12/18/electron-vue/</id>
    <published>2017-12-18T09:04:18.000Z</published>
    <updated>2017-12-21T01:57:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h3><ol>
<li>electron中文网：<a href="https://electron.org.cn/vue/index.html" target="_blank" rel="noopener">https://electron.org.cn/vue/index.html</a> <br><br>2.mac环境，利用builder构建electron+vue的demo: <a href="https://newsn.net/say/electron-vue-demo-mac-builder.html" target="_blank" rel="noopener">https://newsn.net/say/electron-vue-demo-mac-builder.html</a></li>
</ol>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="1-html-webpack-plugin"><a href="#1-html-webpack-plugin" class="headerlink" title="1. html-webpack-plugin"></a>1. html-webpack-plugin</h4><p>description: 通过配置webpack config，利用index.ejs生成index.html <br><br>github: <a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">https://github.com/jantimon/html-webpack-plugin</a></p>
<h4 id="2-vue-electron"><a href="#2-vue-electron" class="headerlink" title="2. vue-electron"></a>2. vue-electron</h4><p>description: 将 electron API 附加到 Vue 对象的 vue 插件，即使所有组件可以通过 this.$electron 访问 electron API 的简单的 vue 插件，不再需要将 electron 导入到每一个组件中。<br><br>github: <a href="https://github.com/SimulatedGREG/vue-electron" target="_blank" rel="noopener">https://github.com/SimulatedGREG/vue-electron</a></p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1.初始化项目"></a>1.初始化项目</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g vue-cli</div><div class="line">vue init simulatedgreg/electron-vue my-project</div></pre></td></tr></table></figure>
<p>这个命令执行完毕后，会出现很多设置项询问项目，出现在命令行里面，我们需要跟进提示，进行操作。<br>选择vue的插件，我们直接回车，默认安装全部插件即可。<br>语法习惯检查，Standard/airbnb都可以，<br>测试部分，根据项目的需求，默认是安装<br>构建的方式，我们选择更加先进的electron-builde，electron-packager适合练习做的小案例<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">~/xuJuan/studySpace » vue init simulatedgreg/electron-vue my-project                                                                                                         xiaojuan@xiaojuandeMacBook-Pro</div><div class="line"></div><div class="line">  A newer version of vue-cli is available.</div><div class="line"></div><div class="line">  latest:    2.9.2</div><div class="line">  installed: 2.8.2</div><div class="line"></div><div class="line">? Application Name my-project</div><div class="line">? Project description An electron-vue project</div><div class="line">? Select <span class="built_in">which</span> Vue plugins to install axios, vue-electron, vue-router, vuex</div><div class="line">? Use linting with ESLint? Yes</div><div class="line">? Which eslint config would you like to use? Standard</div><div class="line">? Setup unit testing with Karma + Mocha? Yes</div><div class="line">? Setup end-to-end testing with Spectron + Mocha? Yes</div><div class="line">? What build tool would you like to use? builder</div><div class="line">? author xiaojuan &lt;&gt;</div><div class="line"></div><div class="line">   vue-cli · Generated <span class="string">"my-project"</span>.</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">All set. Welcome to your new electron-vue project!</div><div class="line"></div><div class="line">Make sure to check out the documentation <span class="keyword">for</span> this boilerplate at</div><div class="line">https://simulatedgreg.gitbooks.io/electron-vue/content/.</div><div class="line"></div><div class="line">Next Steps:</div><div class="line"></div><div class="line">  $ <span class="built_in">cd</span> my-project</div><div class="line">  $ yarn (or `npm install`)</div><div class="line">  $ yarn run dev (or `npm run dev`)</div></pre></td></tr></table></figure></p>
<p>配置完后，my-project 项目即生成</p>
<h4 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2.安装依赖"></a>2.安装依赖</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install <span class="comment"># 或者 yarn install</span></div></pre></td></tr></table></figure>
<h4 id="3-运行项目并调试"><a href="#3-运行项目并调试" class="headerlink" title="3.运行项目并调试"></a>3.运行项目并调试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure>
<p>这个时候，执行的js是：src/main/index.dev.js，我们需要注意里面的如下语句：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'electron-debug'</span>)(&#123; <span class="attr">showDevTools</span>: <span class="literal">true</span> &#125;)</div></pre></td></tr></table></figure></p>
<p>这里就是用于控制浏览器的devtools的。</p>
<h4 id="4-打包"><a href="#4-打包" class="headerlink" title="4. 打包"></a>4. 打包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build:dir</div></pre></td></tr></table></figure>
<p>npm run build:dir 与 npm run build只会打包，但不会生成dmg文件，减少打包时间，便于打包测试</p>
<h4 id="5-生成可执行文件dmg"><a href="#5-生成可执行文件dmg" class="headerlink" title="5. 生成可执行文件dmg"></a>5. 生成可执行文件dmg</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure>
<p>build之后，我们就可以拿到我们的第一个mac程序的dmg文件了，dmg的路径在my-project/build/下面。拖动一下即可安装完成</p>
<h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><h5 id="1-关于安装依赖"><a href="#1-关于安装依赖" class="headerlink" title="1.关于安装依赖"></a>1.关于安装依赖</h5><p>用脚手架装好之后，一定要用npm install, 不能用cnpm，否则打包的时候，有些模块会找不到</p>
<h5 id="2-打包后的调试"><a href="#2-打包后的调试" class="headerlink" title="2.打包后的调试"></a>2.打包后的调试</h5><p>前面说到运行项目适合可以调试，下面一段代码可以让我们打包后生成的应用自动打开调试工具，但是注意开发完成后要注释掉<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/main/index.js的ready函数里，在开发环境可以增加调试，</span></div><div class="line">mainWindow.webContents.openDevTools()</div></pre></td></tr></table></figure></p>
<h6 id="3-electron-builder-分平台打包"><a href="#3-electron-builder-分平台打包" class="headerlink" title="3.electron-builder 分平台打包"></a>3.electron-builder 分平台打包</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一键构建所有安装包</span></div><div class="line">electron-builder -mwl</div><div class="line">electron-builder --platform=all</div><div class="line"><span class="comment">#mac</span></div><div class="line">electron-builder -m</div><div class="line">electron-builder -o</div><div class="line">electron-builder --mac</div><div class="line">electron-builder --macos</div><div class="line">electron-builder --platform=mac</div><div class="line">electron-builder --platform=darwin</div><div class="line"><span class="comment">#window</span></div><div class="line">electron-builder -w</div><div class="line">electron-builder --win</div><div class="line">electron-builder --windows</div><div class="line">electron-builder --platform=win</div><div class="line">electron-builder --platform=win32</div><div class="line"><span class="comment">#linux</span></div><div class="line">electron-builder <span class="_">-l</span></div><div class="line">electron-builder --linux</div><div class="line">electron-builder --platform=linux</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考文档：&quot;&gt;&lt;a href=&quot;#参考文档：&quot; class=&quot;headerlink&quot; title=&quot;参考文档：&quot;&gt;&lt;/a&gt;参考文档：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;electron中文网：&lt;a href=&quot;https://electron.org.cn/vue/ind
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解闭包</title>
    <link href="http://yoursite.com/2017/12/11/Closure/"/>
    <id>http://yoursite.com/2017/12/11/Closure/</id>
    <published>2017-12-11T02:36:29.000Z</published>
    <updated>2017-12-12T07:53:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>闭包就是能够读取其他函数内部变量的函数。</p>
<h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ol>
<li>可以读取函数内部的变量<br></li>
<li>这些变量的值始终保持在内存中<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3></li>
</ol>
<ul>
<li>外部函数 return 的是内部嵌套的函数</li>
<li>依赖于变量作用域<h3 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scope = <span class="string">'global scope'</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> scope = <span class="string">'local scope'</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> scope&#125;</div><div class="line">  <span class="keyword">return</span> f()</div><div class="line">&#125;</div><div class="line">checkScope() <span class="comment">// 'local scope'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scope = <span class="string">'global scope'</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> scope = <span class="string">'local scope'</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> scope&#125;</div><div class="line">  <span class="keyword">return</span> f</div><div class="line">&#125;</div><div class="line">checkScope()() <span class="comment">// 'local scope'</span></div></pre></td></tr></table></figure>
<p>解析：<em>checkScope是f的父函数，f的存在依赖于checkScope，因此f执行的时候，checkScope会在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scope = <span class="string">'global scope'</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">scope</span> : <span class="string">'local scope'</span>,</div><div class="line">  <span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.scope&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">object.getNameFunc()() <span class="comment">//global scope</span></div></pre></td></tr></table></figure>
<p>解析：<em>每个函数调用都包含一个this值，如果闭包在外部函数里，是无法访问this的</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scope = <span class="string">'global scope'</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">scope</span> : <span class="string">'local scope'</span>,</div><div class="line">  <span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> that.scope&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">object.getNameFunc()() <span class="comment">// local scope</span></div></pre></td></tr></table></figure></p>
<p><em>同样，闭包内无法直接访问外部函数的参数数组，除非外部函数能将参数数组保存到另外一个变量中</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=&quot;定义：&quot;&gt;&lt;/a&gt;定义：&lt;/h3&gt;&lt;p&gt;闭包就是能够读取其他函数内部变量的函数。&lt;/p&gt;
&lt;h3 id=&quot;作用：&quot;&gt;&lt;a href=&quot;#作用：&quot; class=&quot;header
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决阿里云服务slb解析域名错误问题</title>
    <link href="http://yoursite.com/2017/11/27/solve-question-of-aliyun/"/>
    <id>http://yoursite.com/2017/11/27/solve-question-of-aliyun/</id>
    <published>2017-11-27T12:07:02.000Z</published>
    <updated>2017-11-27T13:23:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：在阿里云上用docker swarm部署了两个服务 serviceA 和 serviceB 后，出现访问 serviceA 服务时路由到 serviceB 的情况，即访问serviceA/ping 返回的是’ping from serviceB’, 其中serviceA是使用 nginx 代理了一层的服务， serviceB是直接用node 起的服务。</p>
<p>serviceA nginx 代理配置<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">upstream backend &#123;</div><div class="line">        server app1:3000;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>serviceA docker-swarm<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  test-net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  app1:</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line">      <span class="string">...</span></div><div class="line"><span class="attr">    image:</span> <span class="string">registry-internal.cn-shanghai.aliyuncs.com/test/serviceA:latest</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">test-net</span></div><div class="line"><span class="attr">  nginx:</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line">      <span class="string">...</span></div><div class="line"><span class="attr">    image:</span> <span class="string">registry-internal.cn-shanghai.aliyuncs.com/test/nginx-ervice:latest</span></div><div class="line"><span class="attr">    labels:</span></div><div class="line">      <span class="string">aliyun.routing.port_80:</span> <span class="string">serviceA.com</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="attr">      test-net:</span></div><div class="line"><span class="attr">        aliases:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">serviceA.com</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="number">80</span><span class="string">/tcp</span></div><div class="line"><span class="attr">version:</span> <span class="string">"3.2"</span></div></pre></td></tr></table></figure></p>
<p>serviceB docker-swarm<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  test-net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  app1:</span></div><div class="line"><span class="attr">    deploy:</span></div><div class="line">      <span class="string">...</span></div><div class="line"><span class="attr">    image:</span> <span class="string">registry-internal.cn-shanghai.aliyuncs.com/test/serviceB:latest</span></div><div class="line"><span class="attr">    labels:</span></div><div class="line">      <span class="string">aliyun.routing.port_80:</span> <span class="string">serviceB.com</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="attr">      test-net:</span></div><div class="line"><span class="attr">        aliases:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">serviceB.com</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="number">80</span><span class="string">/tcp</span></div><div class="line"><span class="attr">version:</span> <span class="string">"3.2"</span></div></pre></td></tr></table></figure></p>
<p>解决过程：</p>
<h5 id="1-判断是否是域名路由问题"><a href="#1-判断是否是域名路由问题" class="headerlink" title="1. 判断是否是域名路由问题"></a>1. 判断是否是域名路由问题</h5><p>首先， serviceB服务 和 serviceA 的两个服务都在同一个网络环境下，必须要判定是否是域名路由错误<br>通过ssh登录进serviceA 的 nginx 服务所在的机器，终端进入 nginx 容器内, 跟踪nginx 服务的日志<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh root@***ip**</div><div class="line">docker ps</div><div class="line">docker <span class="_">-f</span> logs [container]</div></pre></td></tr></table></figure></p>
<p>然后连续访问 <a href="http://serviceA.com/ping" target="_blank" rel="noopener">http://serviceA.com/ping</a> 发现每次访问都有日志，说明域名解析没有问题，怀疑是nginx代理有问题</p>
<h5 id="2-在确定两个服务的域名解析没有问题后，先确定serviceA-的-nginx-服务是否有问题"><a href="#2-在确定两个服务的域名解析没有问题后，先确定serviceA-的-nginx-服务是否有问题" class="headerlink" title="2. 在确定两个服务的域名解析没有问题后，先确定serviceA 的 nginx 服务是否有问题"></a>2. 在确定两个服务的域名解析没有问题后，先确定serviceA 的 nginx 服务是否有问题</h5><p>从阿里云的控制台进入serviceA应用的管理页，进入serviceA应用下 的nginx 容器终端, curl 其代理的 app1服务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl app1</div></pre></td></tr></table></figure></p>
<p>多次执行后发现，平均有一半是路由到serviceA 的 app 服务，一半是路由到serviceB服务，nginx服务访问没有问题，进一步怀疑是nginx代理到了可能serviceB</p>
<h5 id="3-确认是否是代理问题"><a href="#3-确认是否是代理问题" class="headerlink" title="3. 确认是否是代理问题"></a>3. 确认是否是代理问题</h5><p>因为serviceB服务和serviceA的2个服务都在test-net 网络下，而serviceB部署的时候服务名称和serviceA的app1服务名称相同，怀疑是nginx 无法区分serviceA的app1服务和serviceB服务，所以两个都代理了，<br>分别进入serviceA 的 app1 服务所在的机器，和 serviceB服务所在的机器， 并同时跟踪两个服务的日志后发现的确有一半的访问进入了serviceB，</p>
<h4 id="4-修改service-name"><a href="#4-修改service-name" class="headerlink" title="4. 修改service name"></a>4. 修改service name</h4><p>在阿里云容器服务的应用中修改serviceB docker-swarm 的 service name,<br>serviceA docker-swarm<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  test-net:</span></div><div class="line"><span class="attr">    external:</span> <span class="literal">true</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  serviceB:</span></div><div class="line">  <span class="string">.....</span></div></pre></td></tr></table></figure></p>
<p>serviceB重新部署完成后再次连续访问 <a href="http://serviceA.com/ping，" target="_blank" rel="noopener">http://serviceA.com/ping，</a> 发现仍然有一半路由到 serviceB中</p>
<h4 id="4-重启serviceA-的-nginx-服务的-nginx"><a href="#4-重启serviceA-的-nginx-服务的-nginx" class="headerlink" title="4. 重启serviceA 的 nginx 服务的 nginx"></a>4. 重启serviceA 的 nginx 服务的 nginx</h4><p>通过ssh登录进serviceA 的 nginx 服务所在的机器，终端进入 nginx 容器内, 重启nginx<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx restart</div></pre></td></tr></table></figure></p>
<p>连续多次访问 <a href="http://serviceA.com/ping，发现问题解决" target="_blank" rel="noopener">http://serviceA.com/ping，发现问题解决</a></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>因为serviceB服务和serviceA的2个服务都在 test-net 网络下，serviceA的nginx 服务是代理到它的app1服务，而serviceB服务也叫app1服务，nginx 无法区分serviceA的app1服务和serviceB服务，所以首次代理的时候会记住两个服务的Id并对他们均进行反向代理，之后虽然我们修改了serviceB服务的 service name, 但是因为 nginx 服务是在首次代理后记住他们的containerId, 之后是按照containerId查找服务的，所以任何会反向代理到serviceB服务上，<br>而在重启nginx 后，nginx 会重新去找app1服务的cont，所以就不会再代理错误</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题描述：在阿里云上用docker swarm部署了两个服务 serviceA 和 serviceB 后，出现访问 serviceA 服务时路由到 serviceB 的情况，即访问serviceA/ping 返回的是’ping from serviceB’, 其中servi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/04/16/hello-world/"/>
    <id>http://yoursite.com/2017/04/16/hello-world/</id>
    <published>2017-04-16T05:04:40.000Z</published>
    <updated>2017-12-20T05:41:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<p>dasd</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入浅出node.js 学习笔记</title>
    <link href="http://yoursite.com/2017/04/16/node-study-note/"/>
    <id>http://yoursite.com/2017/04/16/node-study-note/</id>
    <published>2017-04-16T05:04:40.000Z</published>
    <updated>2017-12-11T01:57:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><p>  作者: Ryan Dahl（c/c++程序员）<br><br>  最初目标： 写一个事件驱动，非阻塞的I/O<br><br>  特点：单线程，异步I/O，回调函数<br><br>  应用场景：I/O密集型的应用场景<br><br>  优点：并行I/O</p>
<h2 id="二-模块机制"><a href="#二-模块机制" class="headerlink" title="二.模块机制"></a>二.模块机制</h2><h3 id="1-CommonJs规范"><a href="#1-CommonJs规范" class="headerlink" title="1. CommonJs规范"></a>1. CommonJs规范</h3><p>CommonJs对模块的定义，主要分为模块引用，模块定义，模块标识3部分</p>
<ol>
<li>模块引用<br><br>存在require()方法，这个方法</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一. 简介&quot;&gt;&lt;/a&gt;一. 简介&lt;/h2&gt;&lt;p&gt;  作者: Ryan Dahl（c/c++程序员）&lt;br&gt;&lt;br&gt;  最初目标： 写一个事件驱动，非阻塞的I/O&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>起一个服务进行两个不同的微信公众号之间的素材迁移</title>
    <link href="http://yoursite.com/2017/04/16/sync-wechat/"/>
    <id>http://yoursite.com/2017/04/16/sync-wechat/</id>
    <published>2017-04-16T05:04:40.000Z</published>
    <updated>2017-04-26T07:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-所需依赖"><a href="#1-所需依赖" class="headerlink" title="1. 所需依赖"></a>1. 所需依赖</h3><ul>
<li><p>redis  </p>
<p>文档：<a href="http://redis.js.org/#api-connection-and-other-events-ready" target="_blank" rel="noopener">http://redis.js.org/#api-connection-and-other-events-ready</a></p>
<p>官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a> </p>
<p>是一个由Salvatore Sanfilippo写的key-value存储系统。在项目中用于缓存access-token</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install redis</div></pre></td></tr></table></figure>
</li>
<li><p>bluebird</p>
<p>方法 promise 化</p>
<p><a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="noopener">https://github.com/petkaantonov/bluebird</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install bluebird</div></pre></td></tr></table></figure>
</li>
<li><p>wechatApi</p>
<p>Wechat API/主动调用API，与微信后台官网的素材管理方法对应</p>
<p><a href="https://github.com/node-webot/wechat-api" target="_blank" rel="noopener">https://github.com/node-webot/wechat-api</a></p>
<p><a href="http://doxmate.cool/node-webot/wechat-api/api.html#api_material_exports_getMaterial" target="_blank" rel="noopener">http://doxmate.cool/node-webot/wechat-api/api.html#api_material_exports_getMaterial</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install wechat-api</div></pre></td></tr></table></figure>
</li>
<li><p>disposition</p>
<p>获取相应头部信息</p>
<p><a href="https://github.com/jshttp/content-disposition" target="_blank" rel="noopener">https://github.com/jshttp/content-disposition</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install content-disposition</div></pre></td></tr></table></figure>
</li>
<li><p>express</p>
<p>基于 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>  的Web开发框架，在该项目中用于起服务器</p>
<p><a href="https://github.com/expressjs/express" target="_blank" rel="noopener">https://github.com/expressjs/express</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i express</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h3 id="2-编程逻辑设计"><a href="#2-编程逻辑设计" class="headerlink" title="2.编程逻辑设计"></a>2.编程逻辑设计</h3><ol>
<li>用redis缓存access-token</li>
<li>用WeChat-api初始化两个实例：sourceWechat, tragetWechat </li>
<li>用Wechat-api下载sourceWechat的素材 &gt;</li>
<li>将下载的素材保存到本地cache 文件夹中</li>
<li>将保存的文件用Wechat-api 上传到 tragetWechat，并把本地文件删除</li>
</ol>
<h3 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3.具体实现"></a>3.具体实现</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-所需依赖&quot;&gt;&lt;a href=&quot;#1-所需依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 所需依赖&quot;&gt;&lt;/a&gt;1. 所需依赖&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;redis  &lt;/p&gt;
&lt;p&gt;文档：&lt;a href=&quot;http://redis.js.
    
    </summary>
    
    
  </entry>
  
</feed>
